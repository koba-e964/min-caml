min_caml_print_int
min_caml_print_int_bin ; print int(4bytes) in little-endian format. int -> int (unit)
	MOV R0, R2
	MOV #-8, R1
	WRITE R2
	SHLD R1, R2
	WRITE R2
	SHLD R1, R2
	WRITE R2
	SHLD R1, R2
	WRITE R2
	RTS
	AND R0, R0

min_caml_print_char
	WRITE R0
	RTS
	AND R0, R0

min_caml_read_int
min_caml_read_int_bin ; read int(4bytes) in little-endian format.
	READ R0

	MOV #8, R2
	READ R1
	SHLD R2, R1
	OR R1, R0

	MOV #16, R2
	READ R1
	SHLD R2, R1
	OR R1, R0

	MOV #24, R2
	READ R1
	SHLD R2, R1
	OR R1, R0
	RTS
	AND R0, R0

min_caml_read_float
min_caml_read_float_bin
	STS PR, R14
	MOV.L R14, @R15
	MOV.L .mcrfb0, R14
	JSR @R14
	AND R0, R0
	BRA .mcrfb1
	AND R0, R0
.mcrfb0
	.data.l min_caml_read_int_bin
.mcrfb1
	LDS R0, FPUL
	FSTS FPUL, FR0
	MOV.L @R15, R14
	JMP @R14
	AND R0, R0

min_caml_truncate
min_caml_int_of_float
	FTRC FR0, FPUL
	STS FPUL, R0
	RTS
	AND R0, R0

min_caml_float_of_int
	LDS R0, FPUL
	FLOAT FPUL, FR0
	RTS
	AND R0, R0


min_caml_sqrt
	FSQRT FR0
	RTS
	AND R0, R0


min_caml_floor ; float -> float
	FLDI0 FR1
	FCMP/GT FR0, FR1
	BT .mcfloor0
	FTRC FR0, FPUL
	FLOAT FPUL, FR0
	RTS
	AND R0, R0
.mcfloor0 ;negative
	FTRC FR0, FPUL
	FLOAT FPUL, FR2
	FCMP/EQ FR0, FR2
	BT .mcfloor1 ; exact integer?
	FLDI1 FR1
	FSUB FR1, FR2
.mcfloor1
	FMOV FR2, FR0
	RTS
	AND R0, R0

min_caml_create_array ; int -> 'a -> 'a array
	MOV R12, R3
	MOV R3, R6 ; old_min_caml_hp
	MOV R0, R4
.mcca2
	MOV #0, R5
	CMP/GT R5, R4
	BF .mcca3
	MOV.L R1, @R3 ; element
	ADD #4, R3
	ADD #-1, R4
	BRA .mcca2
	AND R0, R0
.mcca3
	MOV R3, R12
	MOV R6, R0
	RTS
	AND R0, R0

min_caml_create_float_array ; int -> float -> float array
	MOV R12, R3
	MOV R3, R6 ; old_min_caml_hp
	MOV R0, R4
.mccfa2
	MOV #0, R5
	CMP/GT R5, R4
	BF .mccfa3
	FMOV.S FR0, @R3 ;element
	ADD #4, R3
	ADD #-1, R4
	BRA .mccfa2
	AND R0, R0
.mccfa3
	MOV R3, R12
	MOV R6, R0
	RTS
	AND R0, R0

min_caml_finv
        FLDS FR0, FPUL
        STS FPUL, R0
        MOV.L exp_mask, R1
        MOV.L frac_mask, R2
        MOV.L sign_mask, R3
        AND R0, R1              ; exp
        AND R0, R2              ; frac
        AND R0, R3              ; sign
        MOV #0, R5
        CMP/EQ R2, R5
        BT frac0
        AND R0, R0              ; NOP
        
        MOV.L exp_253, R4
        SUB R1, R4              ; exp
        NOT R2, R2              ; frac
        MOV.L frac_mask, R1
        AND R1, R2
        OR R3, R4
        OR R2, R4
        LDS R4, FPUL
        FSTS FPUL, FR0
        LDS R0, FPUL
        FSTS FPUL, FR1
        FNEG FR1
        MOV #0, R0
        MOV #3, R1
        FLDI1 FR2
        FADD FR2, FR2           ; constant 2.0
newton_loop
        FMOV FR0, FR3
        FMUL FR1, FR3
        FADD FR2, FR3
        FMUL FR3, FR0
        ADD #-1, R1
        CMP/EQ R0, R1
        BF newton_loop
        AND R0, R0              ; NOP
        RTS
        AND R0, R0              ; NOP
frac0
        MOV.L exp_254, R4
        SUB R1, R4              ; exp
        OR R3, R4
        LDS R4, FPUL
        FSTS FPUL, FR0
        RTS
        AND R0, R0              ; NOP

        .align
exp_mask
        .data.l #H'7F800000
frac_mask
        .data.l #H'007FFFFF
sign_mask
        .data.l #H'80000000
exp_254
        .data.l #H'7F000000
exp_253
        .data.l #H'7E800000

min_caml_fsqrt_software
        FLDS FR0, FPUL
        STS FPUL, R0

        MOV.L sqrt_exp_mask, R3
        AND R0, R3              ; exp without LSB
        MOV #-1, R1
        SHLD R1, R3

        MOV.L sqrt_frac_mask, R4
        AND R0, R4              ; frac
        SHLD R1, R4

        MOV.L sqrt_exp_189, R5
        MOV #1, R6
        MOV #23, R1
        SHLD R1, R6             ; 1<<23
        ADD #-1, R6

        MOV #1, R1
        MOV #23, R2
        SHLD R2, R1
        AND R0, R1              ; LSB of exp
        MOV #0, R2
        CMP/EQ R1, R2
        BF sqrt_exp_odd
        AND R0, R0

        ;; exp is even
        MOV.L sqrt_exp_190, R5
        MOV #-1, R1
        SHLD R1, R6

sqrt_exp_odd
        SUB R3, R5

        SUB R4, R6
        OR R6, R5               ; init value

        FMOV FR0, FR1
        FNEG FR1                ; -A
        LDS R5, FPUL
        FSTS FPUL, FR0          ; init value

        MOV.L sqrt_const_half, R2
        LDS R2, FPUL
        FSTS FPUL, FR2
        MOV.L sqrt_const_3, R3
        LDS R3, FPUL
        FSTS FPUL, FR3
        MOV #4, R1
        MOV #0, R0
sqrt_newton_loop
        FMOV FR0, FR4           ; x
        FMUL FR0, FR4           ; x^2
        FMUL FR1, FR4           ; -Ax^2
        FADD FR3, FR4           ; 3-Ax^2
        FMUL FR4, FR0           ; x(3-Ax^2)
        FMUL FR2, FR0           ; next x
        ADD #-1, R1
        CMP/EQ R0, R1
        BF sqrt_newton_loop
        AND R0, R0              ; NOP
	STS PR, R14
	MOV.L R14, @R15
	ADD #4, R15
	MOV.L .si_inv, R14
	JSR @R14
        AND R0, R0              ; NOP
	ADD #-4, R15
	MOV.L @R15, R14
	JMP @R14
        AND R0, R0              ; NOP
.si_inv
	.data.l min_caml_finv

        .align
sqrt_exp_mask
        .data.l #H'7F000000
sqrt_frac_mask
        .data.l #H'007FFFFF
sqrt_exp_189
        .data.l #H'5E800000
sqrt_exp_190
        .data.l #H'5F000000
sqrt_const_half
        .data.l #H'3F000000
sqrt_const_3
        .data.l #H'40400000
	.align

